using System.Threading;
using System;

public class ZeroEvenOdd {
    private int n;
    private int i; // so important to centralize this one!
    private AutoResetEvent eventZero;
    private AutoResetEvent eventOdd;
    private AutoResetEvent eventEven;

    public ZeroEvenOdd(int n) {
        this.n = n;
        i = 1;
        eventZero = new AutoResetEvent(true);
        eventOdd = new AutoResetEvent(false);
        eventEven = new AutoResetEvent(false);
    }

    // printNumber(x) outputs "x", where x is an integer.
    public void Zero(Action<int> printNumber) {
        for (int k=1;k<n+1;k++)
        {
            //System.Console.WriteLine("start eventZero.WaitOne");
            eventZero.WaitOne();
            //System.Console.WriteLine(0);
            printNumber(0);
            if (k%2==0)
                eventEven.Set();
            else
                eventOdd.Set();
        }
    }

    public void Even(Action<int> printNumber) {
        //for (int i=2;i<n;i++)
        int lastNum = n;
        if (n%2==1)
            lastNum -= 1;

        while (i <= lastNum)
        {
            //System.Console.WriteLine("start eventEven.WaitOne");
            eventEven.WaitOne();
            if (i%2==0){
                System.Console.WriteLine(i);
                printNumber(i);
                i += 1;
                eventZero.Set();
            }
        }
    }

    public void Odd(Action<int> printNumber) {
        //for (int i=1;i<n;i++)
        int lastNum = n;
        if (n%2==0)
            lastNum -= 1;
        while (i <= lastNum)
        {
            //System.Console.WriteLine("start eventOdd.WaitOne");
            eventOdd.WaitOne();
            if (i%2==1){
                System.Console.WriteLine(i);
                printNumber(i);
                i += 1;
                eventZero.Set();
            }
        }
    }
}