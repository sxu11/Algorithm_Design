1. What: Create shorter alias for long URLs.
- Hard (functional) require:
    - fixed length
    - unique
- Optional Hard:
    - pick custom short link
    - expire
    - accessible by API call
- Soft (non-functional) require:
    - resilient (to attack; not guessable)
    - highly available
    - low latency

1.1 What hard

1.2 What soft
- Assumptions:
    - read:write = 100:1
    - 500M new URL shortening / month
    - store each new for 5 years
    - Each object ~ 0.5 kb
    - hotspot: 80-20 rule

- Calculations:
    - QPS:
        - QPMonth = 500M * 100 = 50B
        - Write QPS = 500M / (30*24*3600) = 200
        - Write size = 200 * 0.5 kb = 100 kb
        - Read QPS: 20K
        - Read size = 10 Mb
    - Storage:
        - Total number = 500M * 5 * 12 = 30B
        - Total size = 30B * 0.5 kb = 15 Tb
    - Memory:
        - Per day (?) Read QPS: 20K * 3600 * 24 = 1.7B
        - To cache 20%, we need 0.2 * 1.7B * 0.5kb = 170GB

- API:
    - CreateURL(api_dev_key, original_url,
    custom_alias=None, user_name=None, expire_date=None)
    - deleteURL(api_dev_key, url_key)

- DB: 2 tables
    - URL mapping
        - Hash
        - OriginalURL
        - CreateDate
        - ExpireDate
        - UserID
    - User
        - UserID
        - Name
        - Email
        - CreateDate
        - LastLogin
